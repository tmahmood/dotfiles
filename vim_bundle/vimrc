
call plug#begin()
Plug 'mhinz/vim-startify'
Plug 'mivok/vimtodo'
Plug 'girishji/vimcomplete'
Plug 'vim-scripts/darkbone.vim'
Plug 'preservim/nerdtree'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'honza/vim-snippets'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'w0rp/ale'
Plug 'mattn/emmet-vim'
Plug 'godlygeek/csapprox'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
"Plug 'SirVer/ultisnips'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'easymotion/vim-easymotion'
Plug 'unblevable/quick-scope'
Plug 'luochen1990/rainbow'
Plug 'jacoborus/tender.vim'
Plug 'pineapplegiant/spaceduck', { 'branch': 'main' }
Plug 'junegunn/vim-peekaboo'
Plug 'liuchengxu/vim-which-key'
Plug 'ervandew/supertab'
Plug 'mhartington/oceanic-next'
Plug 'sainnhe/sonokai'
Plug 'tpope/vim-vividchalk'
Plug 'w0ng/vim-hybrid'
Plug 'junegunn/seoul256.vim'
Plug 'junegunn/seoul256.vim'
Plug 'morhetz/gruvbox'
Plug 'mbbill/undotree'
Plug 'liuchengxu/vista.vim'
Plug 'mhinz/vim-signify'
Plug 'nanotech/jellybeans.vim'
Plug 'gertjanreynaert/cobalt2-vim-theme'
Plug 'gkjgh/cobalt'
Plug 'NLKNguyen/papercolor-theme'
Plug 'cocopon/iceberg.vim'
Plug 'ayu-theme/ayu-vim'
Plug 'whatyouhide/vim-gotham'
Plug 'fenetikm/falcon'
Plug 'Rigellute/rigel'
Plug 'sainnhe/everforest'
Plug 'jbmorgado/vim-pine-script'
Plug 'vimwiki/vimwiki'
Plug 'arzg/vim-colors-xcode'
Plug 'terryma/vim-multiple-cursors'

Plug 'embark-theme/vim'
call plug#end()


" {{{ paths
if $APPDATA != ''
    let rootpath=$APPDATA . "/vim"
    let undopath=rootpath . "/undo"
    let swappath=rootpath . "/swap"
    let backuppath=rootpath . "/backups"

    if !isdirectory(rootpath)
        call mkdir(undopath, 'p')
        call mkdir(swappath)
    else
        if !isdirectory(swappath)
            call mkdir(swappath)
        endif
        if !isdirectory(undopath)
            call mkdir(undopath)
        endif
        if !isdirectory(backuppath)
            call mkdir(backuppath)
        endif
    endif

    let f=fnameescape(swappath)
    exec "set directory=".f

    let f=fnameescape(undopath)
    exec "set undodir=".f

    let f=fnameescape(backuppath)
    exec "set backupdir=".f
else
    if !isdirectory($HOME . '/tmp/vim')
        call mkdir($HOME . '/tmp/vim/swp', 'p')
        call mkdir($HOME . '/tmp/vim/undo')
        call mkdir($HOME . '/tmp/vim/backups')
    endif
    set directory=~/tmp/vim/swp
    set undodir=~/tmp/vim/undo
    set backupdir=~/tmp/vim/backups
    set shell=/bin/zsh
endif
" }}}

" All the settings
"
let mapleader="\<space>"
runtime macros/matchit.vim
filetype plugin on
syn on
set omnifunc=syntaxcomplete#Complete

set tabstop=4
set expandtab
set shiftwidth=4
set textwidth=0
set formatoptions+=t
set wrapmargin=140
set gdefault
set backspace=indent,eol,start
set number
set hidden
set lazyredraw
set wildmenu
set wildmode=longest:list,full
set wildignore=*.dll,*.o,*.pyc,*.bak,*.exe,*$py.class,*.class
set showbreak=â€£
set showcmd
set completeopt+=menuone
set numberwidth=4
set encoding=utf-8
set termencoding=utf-8
set undofile
set scrolloff=3
set switchbuf=useopen
set relativenumber
set smartindent
set autoindent
set cryptmethod=blowfish2
set nojoinspaces
set ttyfast                     " smoother scrolling
set shortmess+=I                " no startup message
set shortmess-=S                " Display search result count
set matchtime=1                 " how many 10ths of a second to blink matching brackets
set wrap
set formatoptions=qrn1
set laststatus=2
set foldenable
set smartcase
set ignorecase
set incsearch
set hlsearch
set ttimeoutlen=50
set autowrite
set colorcolumn=-2
set backupcopy=yes
set nofixeol
set nofixendofline
set notimeout

if executable('rg')
    let g:ackprg = 'rg --vimgrep'
endif

let java_highlight_functions = 1


autocmd FileType html set spell
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

autocmd FileType python set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
autocmd FileType python set omnifunc=python3complete#Complete

autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType phtml set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType sql set omnifunc=sqlcomplete#Complete
autocmd FileType java setlocal omnifunc=javacomplete#Complete
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" If you prefer the Omni-Completion tip window to close when a selection is
" made, these lines close it on movement in insert mode or when leaving
" insert mode
" autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" }}}


" Activate Limelight when we enter Goyo.
autocmd User GoyoEnter Limelight
autocmd User GoyoLeave Limelight!

" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options

command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)

" KEYBOARD MAPPINGS {{{
let g:NumberToggleTrigger="<F2>"
nmap <silent> <leader>s :set nolist!<CR>
nmap <silent> <Leader>cd :lcd %:p:h<CR>
" global copy/paste
nmap <leader>y "+yy
nmap <leader>p "+p
nmap ,D "_dd " does not put into register
" sort things
nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
nnoremap <leader>q gqip
nnoremap <leader>v V`]
nnoremap j gj
nnoremap k gk
noremap '. `.
noremap `. '.
" Quickfix navigation
nmap cn :cnext<cr>
nmap cp :cprev<cr>
nmap bn <esc>:bn<cr>
nmap bp <esc>:bp<cr>
" Redraw screen and remove search highlights
nnoremap <silent> <BS> :nohl<cr><c-l>
" Start search with word under cursor
nmap ,z :%s/<c-r><c-w>/
vmap ,z :<c-u>%s/<c-r>*/
map ,w <esc>:w<cr>
map <Leader>r <esc>:reg<cr>
map ,bd <esc>:bd<cr>
"Pressing ,ss will toggle and untoggle spell checking
map ,ss :setlocal spell!<cr>
" Yep ... no more up keys
map <UP> <esc>
map <DOWN> <esc>
map <LEFT> <esc>:Vista!!<cr>
nnoremap <RIGHT> :UndotreeToggle<CR>
" update tag file/headless make/display errors
map <Leader>c :Copen<cr>
map <Leader>e :Errors<cr>
" Prints date and time
map <leader>dt :r! date +"// +\%Y-\%m-\%d \%H:\%M:\%S"<cr><cr>
map <leader>dT :r! date +"\# \%d \%h, \%a, \%Y"<cr><cr>
"}}}
 
nnoremap <Leader>\ :Goyo<CR>
map ,e <esc>:NERDTreeToggle<CR>

map <Space>m <esc>15<c-w><c-+>


let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_auto_colors = 0


"let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]
"
"" make YCM compatible with UltiSnips (using supertab)
"let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<C-n>'
"
"" better key bindings for UltiSnipsExpandTrigger
"let g:UltiSnipsExpandTrigger = "<tab>"
"let g:UltiSnipsJumpForwardTrigger = "<tab>"
"let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

let g:jsx_ext_required = 0

" Overwrite some Goya defaults
let g:goyo_width = 105
let g:goyo_margin_top = 2
let g:goyo_margin_bottom = 2

" Vista
let g:vista_fzf_preview = ['right:50%']

let g:rooter_patterns = ['build.gradle', 'package.json', '.git/', 'cargo.toml']
let python_highlight_all = 1

let g:ale_linters = {'rust': ['analyzer']}
let g:ale_fixers = {'rust': ['rustfmt']}
let g:ale_completion_enabled = 1

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
                \   '%dW %dE',
                \   all_non_errors,
                \   all_errors
                \)
endfunction
set omnifunc=ale#completion#OmniFunc
let g:rainbow_active = 1

nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
nnoremap <silent> , :WhichKey ','<CR>

let g:which_key_map =  {}
let g:which_key_map.f = { 'name' : '+file' }
nnoremap <silent> <leader>fs :update<CR>
let g:which_key_map.f.s = ['update', 'save-file']
nnoremap <silent> <leader>fd :e $MYVIMRC<CR>
let g:which_key_map.f.d = ['e $MYVIMRC', 'open-vimrc']
let g:which_key_map.o = { 'name' : '+open' }
nnoremap <silent> <leader>oq  :copen<CR>
let g:which_key_map.o.q = ['copen', 'open-quickfix']
nnoremap <silent> <leader>ol  :lopen<CR>
let g:which_key_map.o.l = ['lopen', 'open-locationlist']
let g:which_key_map.b = {
   \ 'name' : '+buffer' ,
   \ '1' : ['b1'        , 'buffer 1']        ,
   \ '2' : ['b2'        , 'buffer 2']        ,
   \ 'd' : ['bd'        , 'delete-buffer']   ,
   \ 'f' : ['bfirst'    , 'first-buffer']    ,
   \ 'h' : ['Startify'  , 'home-buffer']     ,
   \ 'l' : ['blast'     , 'last-buffer']     ,
   \ 'n' : ['bnext'     , 'next-buffer']     ,
   \ 'p' : ['bprevious' , 'previous-buffer'] ,
   \ '?' : ['Buffers'   , 'fzf-buffer']      ,
   \ }
let g:which_key_map.l = {
   \ 'name' : '+lsp'                                            ,
   \ 'f' : ['LanguageClient#textDocument_formatting()'     , 'formatting'],
   \ 'h' : ['LanguageClient#textDocument_hover()'          , 'hover'],
   \ 'r' : ['LanguageClient#textDocument_references()'     , 'references'],
   \ 'R' : ['LanguageClient#textDocument_rename()'         , 'rename'],
   \ 's' : ['LanguageClient#textDocument_documentSymbol()' , 'document-symbol'],
   \ 'S' : ['LanguageClient#workspace_symbol()'            , 'workspace-symbol'],
   \ 'g' : {
     \ 'name': '+goto',
     \ 'd' : ['LanguageClient#textDocument_definition()', 'definition'],
     \ 't' : ['LanguageClient#textDocument_typeDefinition()', 'type-definition'],
     \ 'i' : ['LanguageClient#textDocument_implementation()', 'implementation'],
     \ },
   \ }
call which_key#register('<Space>', "g:which_key_map")
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
vnoremap <silent> <leader> :<c-u>WhichKeyVisual '<Space>'<CR>
set timeoutlen=500

if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
endif

if &listchars ==# 'eol:$'
    set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
    if !has('win32') && (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8')
        let &listchars = "tab:\u2023\u2027,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"
    endif
endif

" go back to previous position on open
augroup resCur
    autocmd!
    autocmd BufReadPost * call setpos(".", getpos("'\""))
augroup END

" rename the current file
" https://github.com/r00k/dotfiles/blob/master/vimrc
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <Leader>n :call RenameFile()<cr>

function! DOS2UNIX()
    update
    e ++ff=dos
    setlocal ff=unix
    w
endfunction
map <Leader>u :call DOS2UNIX()<cr>


" Periodical auto-save
" Write to disk after 1 second of inactivity, once every 15 seconds.
au BufRead,BufNewFile * let b:last_autosave=localtime()
au CursorHold * call UpdateFile()
au BufWritePre * let b:last_autosave=localtime()
set updatetime=1000
function! UpdateFile()
    if exists("b:last_autosave") && ((localtime() - b:last_autosave) >= 15)
        update
        let b:last_autosave=localtime()
    endif
endfunction

set timeout timeoutlen=1000 ttimeoutlen=100


" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
    let @/ = ''
    if exists('#auto_highlight')
        au! auto_highlight
        augroup! auto_highlight
        setl updatetime=4000
        echo 'Highlight current word: off'
        return 0
    else
        augroup auto_highlight
            au!
            au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
        augroup end
        setl updatetime=500
        echo 'Highlight current word: ON'
        return 1
    endif
endfunction


map ,f :FZF<CR>
nnoremap ,b :Buffers<CR>
nnoremap ,m :History<CR>
nnoremap ,k :Marks<CR>
nnoremap ,t :Tags<CR>
nnoremap ,g :BTags<CR>
nnoremap ,l :Lines<CR>
nnoremap ,bl :BLines<CR>

" This is the default extra key bindings
let g:fzf_action = {
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-x': 'split',
            \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
" let g:fzf_layout = { 'up': '~80%' }

" You can set up fzf window using a Vim command (Neovim or latest Vim 8 required)
" let g:fzf_layout = { 'window': 'enew' }
" let g:fzf_layout = { 'window': '-tabnew' }
" let g:fzf_layout = { 'window': '10split enew' }
"
" Customize fzf colors to match your color scheme
let g:fzf_colors =
            \ { 'fg':      ['fg', 'Normal'],
            \ 'bg':      ['bg', 'Normal'],
            \ 'hl':      ['fg', 'Comment'],
            \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
            \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
            \ 'hl+':     ['fg', 'Statement'],
            \ 'info':    ['fg', 'PreProc'],
            \ 'border':  ['fg', 'Ignore'],
            \ 'prompt':  ['fg', 'Conditional'],
            \ 'pointer': ['fg', 'Exception'],
            \ 'marker':  ['fg', 'Keyword'],
            \ 'spinner': ['fg', 'Label'],
            \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

function! HandleFZF(file)
    echo a:file
endfunction
command! -nargs=1 HandleFZF :call HandleFZF(<f-args>)


let g:startify_custom_header = map(split(system('command fortune | cowsay'), '\n'), '"   ". v:val') + ['','']

augroup StartifyHighlightThings
    autocmd! ColorScheme *
                \ hi StartifyBracket ctermfg=241 |
                \ hi StartifyFile    ctermfg=147 |
                \ hi StartifyFooter  ctermfg=240 |
                \ hi StartifyHeader  ctermfg=114 |
                \ hi StartifyNumber  ctermfg=215 |
                \ hi StartifyPath    ctermfg=245 |
                \ hi StartifySlash   ctermfg=240 |
                \ hi StartifySpecial ctermfg=240
augroup END

let g:startify_skiplist = [
            \ 'tmp/',
            \ ]
let g:vimwiki_list = [{'path': '~/Dropbox/notes/Obsidian', 'ext': 'md'}]
let g:vimwiki_auto_chdir = 1

let g:airline_powerline_fonts = 1
let g:airline_experimental = 1
let w:airline_skip_empty_sections = 1
let g:airline_left_sep=''
let g:airline_right_sep=''

" let g:airline_section_z='%3p%% %#__accent_bold# %#__accent_yellow# ó°¬“%4l/%4t %#__restore__# %3v'
"
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_symbols.colnr =  ' â£¾ '
let g:airline_symbols.linenr =  ' â£¾ '
let g:airline_symbols.maxlinenr = ' '
set nocursorcolumn


" {{{ themeing
set background=dark
" following fix color issue anad redraw issue, do not remove
set t_ut=
if has("gui_running")
    set guioptions=acegit
    colorscheme xcodedarkhc
    set guifont=MartianMono\ NF\ Cond\ 12
    set linespace=2
    set guiheadroom=0
else
    set t_Co=256
    set termguicolors
    colorscheme embark
    " colorscheme xcode
endif
" }}}

