snippet if "if statement" !b
if ${1:condition}:
	${2:action}
	${3:}
endsnippet

snippet ifmain "is main" !b
def main():
	"""Entry point"""
	${1:pass}

if __name__ == '__main__':
	main()
endsnippet

snippet ty "Try catch" !b
try:
	${1:statement}
except Exception as e:
	${2:self}.logger.exception('${3:error: }')
endsnippet

snippet pylnt "pylnt" b
# pylint: disable=${1:superfluous-parens, broad-except}
endsnippet

snippet str_diff "Find where strings are different" b
[i for i in xrange(len(${1:str1})) if $1[i] != ${2:str2}[i]]
endsnippet

snippet str_replace "Replace a char inside string by index" b
${1:word} = ${1}[:${2:index}] + ${3:char} + ${1}[${2} + 1:]
endsnippet

snippet logging_setup "Quick Logging setup" b
import logging


LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
LOGGER = logging.getLogger(__name__)


def _configure_logging():
    """logging configuration

    """
    LOGGER.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    formatter = logging.Formatter(LOG_FORMAT)
    ch.setFormatter(formatter)
    _LOGGER.addHandler(ch)

endsnippet

snippet testing "Setup a test class" b
import unittest


class Test${1:Case}(unittest.TestCase):
    """do some testing now"""

    def test_${2:something}(self):
        pass

unittest.main()

endsnippet

snippet d:k "Dictionary value" b
'${1:key}': '${2:value}',
endsnippet
